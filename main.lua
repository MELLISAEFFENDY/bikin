-- modern_autofish.lua
-- Modern UI + Dual-mode AutoFishing (combines ideas from old.lua and new.lua)
-- Drop this script into a LocalScript environment in Roblox (e.g. StarterPlayerScripts)
-- Author: autogenerated helper

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")

local LocalPlayer = Players.LocalPlayer
if not LocalPlayer then
    warn("modern_autofish: LocalPlayer not found - run as LocalScript")
    return
end

-- Utils
local function Notify(title, text)
    pcall(function()
        StarterGui:SetCore("SendNotification", {Title = title, Text = text, Duration = 4})
    end)
    print("[modern_autofish]", title, "-", text)
end

-- Remote loader helper (robust)
local function FindNet()
    local ok, net = pcall(function()
        local packages = ReplicatedStorage:FindFirstChild("Packages")
        if not packages then return nil end
        local idx = packages:FindFirstChild("_Index")
        if not idx then return nil end
        local sleit = idx:FindFirstChild("sleitnick_net@0.2.0")
        if not sleit then return nil end
        return sleit:FindFirstChild("net")
    end)
    return ok and net or nil
end

local net = FindNet()
if not net then
    Notify("modern_autofish", "Warning: net package not found. Many features will not work.")
end

-- Attempt to resolve remotes safely
local function ResolveRemote(name)
    if not net then return nil end
    local ok, rem = pcall(function() return net:FindFirstChild(name) end)
    if ok then return rem end
    return nil
end

local rodRemote = ResolveRemote("RF/ChargeFishingRod")
local miniGameRemote = ResolveRemote("RF/RequestFishingMinigameStarted")
local finishRemote = ResolveRemote("RE/FishingCompleted")
local equipRemote = ResolveRemote("RE/EquipToolFromHotbar")

-- Generic safe invoker that handles RemoteEvent vs RemoteFunction and returns success+result
local function safeInvoke(remote, ...)
    if not remote then return false, "remote_nil" end
    local ok, res
    if remote:IsA("RemoteFunction") then
        ok, res = pcall(function(...) return remote:InvokeServer(...) end, ...)
    else
        ok, res = pcall(function(...) remote:FireServer(...) return true end, ...)
    end
    return ok, res
end

-- Mode: two modes
-- "fast" : behaviour inspired by new.lua (fast, less random)
-- "secure": behaviour inspired by old.lua (randomized, rate-limited, security)

local Config = {
    mode = "secure",       -- "secure" or "fast"
    autoRecastDelay = 0.6,  -- base delay between cycles
    safeModeChance = 70,    -- percent for safe-mode perfect cast
    secure_max_actions_per_minute = 120,
    secure_detection_cooldown = 5,
    enabled = false
}

-- Security state (for secure mode)
local Security = {
    actionsThisMinute = 0,
    lastMinuteReset = tick(),
    isInCooldown = false,
    suspicion = 0
}

local stopFlag = false
local sessionId = 0

-- seeding random
math.randomseed(tick() + (LocalPlayer and LocalPlayer.UserId or 0))

local function inCooldown()
    local now = tick()
    if now - Security.lastMinuteReset > 60 then
        Security.actionsThisMinute = 0
        Security.lastMinuteReset = now
    end
    if Security.actionsThisMinute >= Config.secure_max_actions_per_minute then
        Security.isInCooldown = true
        return true
    end
    return Security.isInCooldown
end

local function secureInvoke(remote, ...)
    if inCooldown() then
        return false, "cooldown"
    end
    Security.actionsThisMinute = Security.actionsThisMinute + 1
    -- micro jitter
    local jitter = 0.01 + math.random() * 0.05
    task.wait(jitter)
    local ok, res = safeInvoke(remote, ...)
    if not ok then
        Security.suspicion = Security.suspicion + 1
        if Security.suspicion > 10 then
            Security.isInCooldown = true
            task.spawn(function()
                Notify("modern_autofish", "Entering cooldown due to repeated errors")
                task.wait(Config.secure_detection_cooldown)
                Security.suspicion = 0
                Security.isInCooldown = false
            end)
        end
    end
    return ok, res
end

-- Helper to get server time when available
local function GetServerTime()
    local ok, st = pcall(function() return workspace:GetServerTimeNow() end)
    if ok and type(st) == "number" then return st end
    return tick()
end

-- Core fishing cycle implementations
local function DoFastCycle()
    -- fast mode uses less randomization and smaller delays
    if equipRemote then pcall(function() equipRemote:FireServer(1) end) end
    local usePerfect = false
    if Config.safeModeChance and Config.safeModeChance > 0 then
        usePerfect = math.random(1,100) <= Config.safeModeChance
    end

    local timestamp = usePerfect and GetServerTime() or GetServerTime() + math.random()*0.5
    if rodRemote then pcall(function() rodRemote:InvokeServer(timestamp) end) end
    task.wait(0.08 + math.random()*0.06)
    local x = usePerfect and -1.238 or (math.random(-1000,1000)/1000)
    local y = usePerfect and 0.969 or (math.random(0,1000)/1000)
    if miniGameRemote then pcall(function() miniGameRemote:InvokeServer(x,y) end) end
    task.wait(1.0 + math.random()*0.4)
    if finishRemote then pcall(function() finishRemote:FireServer() end) end
end

local function DoSecureCycle()
    -- secure mode: use secureInvoke with jitter, rate-limits and random delays
    if inCooldown() then
        task.wait(1)
        return
    end
    if equipRemote then secureInvoke(equipRemote, 1) end

    local usePerfect = false
    if Config.safeModeChance and Config.safeModeChance > 0 then
        usePerfect = math.random(1,100) <= Config.safeModeChance
    end

    local ts = GetServerTime()
    local timestamp = usePerfect and ts or ts + (math.random()*0.8 - 0.4)

    secureInvoke(rodRemote, timestamp)
    task.wait(0.08 + math.random()*0.12)
    local x = usePerfect and -1.2379989624023438 or (math.random(-1000,1000)/1000)
    local y = usePerfect and 0.9800224985802423 or (math.random(0,1000)/1000)
    secureInvoke(miniGameRemote, x, y)
    task.wait(0.6 + math.random()*1.2)
    if finishRemote then secureInvoke(finishRemote) end
end

-- Autofish runner
local function AutofishRunner(mySession)
    Notify("modern_autofish", "AutoFishing started (mode: " .. Config.mode .. ")")
    while Config.enabled and sessionId == mySession do
        local ok, err = pcall(function()
            if Config.mode == "fast" then
                DoFastCycle()
            else
                DoSecureCycle()
            end
        end)
        if not ok then
            warn("modern_autofish: cycle error:", err)
            Notify("modern_autofish", "Cycle error: " .. tostring(err))
            -- small backoff
            task.wait(0.5 + math.random()*0.5)
        end
        -- base recast delay with small random jitter
        local delay = Config.autoRecastDelay + (math.random()*0.2 - 0.1)
        if delay < 0.05 then delay = 0.05 end
        local elapsed = 0
        while elapsed < delay do
            if not Config.enabled or sessionId ~= mySession then break end
            task.wait(0.05)
            elapsed = elapsed + 0.05
        end
    end
    Notify("modern_autofish", "AutoFishing stopped")
end

-- Create minimal modern UI (ScreenGui) with Controls
local function BuildUI()
    local playerGui = LocalPlayer:WaitForChild("PlayerGui")
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "ModernAutoFishUI"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = playerGui

    local frame = Instance.new("Frame")
    frame.Name = "Panel"
    frame.Size = UDim2.new(0, 360, 0, 180)
    frame.Position = UDim2.new(0, 20, 0, 80)
    frame.AnchorPoint = Vector2.new(0,0)
    frame.BackgroundColor3 = Color3.fromRGB(30,30,35)
    frame.BorderSizePixel = 0
    frame.Parent = screenGui

    local uiCorner = Instance.new("UICorner") uiCorner.Parent = frame

    local title = Instance.new("TextLabel")
    title.Parent = frame
    title.Size = UDim2.new(1, -20, 0, 28)
    title.Position = UDim2.new(0, 10, 0, 8)
    title.BackgroundTransparency = 1
    title.Text = "Modern AutoFish"
    title.Font = Enum.Font.GothamBold
    title.TextSize = 18
    title.TextColor3 = Color3.fromRGB(230,230,230)
    title.TextXAlignment = Enum.TextXAlignment.Left

    local modeLabel = Instance.new("TextLabel")
    modeLabel.Parent = frame
    modeLabel.Size = UDim2.new(0, 120, 0, 20)
    modeLabel.Position = UDim2.new(0, 10, 0, 42)
    modeLabel.BackgroundTransparency = 1
    modeLabel.Text = "Mode:"
    modeLabel.Font = Enum.Font.SourceSans
    modeLabel.TextSize = 14
    modeLabel.TextColor3 = Color3.fromRGB(200,200,200)
    modeLabel.TextXAlignment = Enum.TextXAlignment.Left

    local modeDropdown = Instance.new("TextButton")
    modeDropdown.Parent = frame
    modeDropdown.Size = UDim2.new(0, 200, 0, 26)
    modeDropdown.Position = UDim2.new(0, 130, 0, 38)
    modeDropdown.Text = Config.mode
    modeDropdown.Font = Enum.Font.SourceSans
    modeDropdown.TextSize = 14
    modeDropdown.BackgroundColor3 = Color3.fromRGB(45,45,50)
    modeDropdown.TextColor3 = Color3.fromRGB(230,230,230)

    local fastButton = Instance.new("TextButton") fastButton.Parent = frame
    fastButton.Size = UDim2.new(0, 100, 0, 26)
    fastButton.Position = UDim2.new(0, 10, 0, 70)
    fastButton.Text = "Fast Mode"
    fastButton.Font = Enum.Font.SourceSans
    fastButton.TextSize = 14
    fastButton.BackgroundColor3 = Color3.fromRGB(70,70,120)
    fastButton.TextColor3 = Color3.fromRGB(255,255,255)

    local secureButton = Instance.new("TextButton") secureButton.Parent = frame
    secureButton.Size = UDim2.new(0, 120, 0, 26)
    secureButton.Position = UDim2.new(0, 120, 0, 70)
    secureButton.Text = "Secure Mode"
    secureButton.Font = Enum.Font.SourceSans
    secureButton.TextSize = 14
    secureButton.BackgroundColor3 = Color3.fromRGB(70,120,70)
    secureButton.TextColor3 = Color3.fromRGB(255,255,255)

    local startBtn = Instance.new("TextButton") startBtn.Parent = frame
    startBtn.Size = UDim2.new(0, 160, 0, 34)
    startBtn.Position = UDim2.new(0, 10, 1, -44)
    startBtn.AnchorPoint = Vector2.new(0,0)
    startBtn.Text = "Start"
    startBtn.Font = Enum.Font.GothamBold
    startBtn.TextSize = 16
    startBtn.BackgroundColor3 = Color3.fromRGB(50,150,200)
    startBtn.TextColor3 = Color3.fromRGB(255,255,255)

    local stopBtn = Instance.new("TextButton") stopBtn.Parent = frame
    stopBtn.Size = UDim2.new(0, 160, 0, 34)
    stopBtn.Position = UDim2.new(1, -170, 1, -44)
    stopBtn.AnchorPoint = Vector2.new(0,0)
    stopBtn.Text = "Stop"
    stopBtn.Font = Enum.Font.GothamBold
    stopBtn.TextSize = 16
    stopBtn.BackgroundColor3 = Color3.fromRGB(160,60,60)
    stopBtn.TextColor3 = Color3.fromRGB(255,255,255)

    -- Sliders as simple buttons + labels
    local delayLabel = Instance.new("TextLabel") delayLabel.Parent = frame
    delayLabel.Size = UDim2.new(0, 160, 0, 20)
    delayLabel.Position = UDim2.new(0,10,0,104)
    delayLabel.BackgroundTransparency = 1
    delayLabel.Text = string.format("Recast Delay: %.2fs", Config.autoRecastDelay)
    delayLabel.Font = Enum.Font.SourceSans
    delayLabel.TextSize = 14
    delayLabel.TextColor3 = Color3.fromRGB(200,200,200)
    delayLabel.TextXAlignment = Enum.TextXAlignment.Left

    local delayMinus = Instance.new("TextButton") delayMinus.Parent = frame
    delayMinus.Size = UDim2.new(0,28,0,20)
    delayMinus.Position = UDim2.new(0,180,0,104)
    delayMinus.Text = "-"
    delayMinus.Font = Enum.Font.SourceSansBold
    delayMinus.TextSize = 18
    delayMinus.BackgroundColor3 = Color3.fromRGB(70,70,70)
    delayMinus.TextColor3 = Color3.fromRGB(255,255,255)

    local delayPlus = Instance.new("TextButton") delayPlus.Parent = frame
    delayPlus.Size = UDim2.new(0,28,0,20)
    delayPlus.Position = UDim2.new(0,214,0,104)
    delayPlus.Text = "+"
    delayPlus.Font = Enum.Font.SourceSansBold
    delayPlus.TextSize = 18
    delayPlus.BackgroundColor3 = Color3.fromRGB(70,70,70)
    delayPlus.TextColor3 = Color3.fromRGB(255,255,255)

    local chanceLabel = Instance.new("TextLabel") chanceLabel.Parent = frame
    chanceLabel.Size = UDim2.new(0, 240, 0, 20)
    chanceLabel.Position = UDim2.new(0,10,0,126)
    chanceLabel.BackgroundTransparency = 1
    chanceLabel.Text = string.format("Safe Perfect %%: %d", Config.safeModeChance)
    chanceLabel.Font = Enum.Font.SourceSans
    chanceLabel.TextSize = 14
    chanceLabel.TextColor3 = Color3.fromRGB(200,200,200)
    chanceLabel.TextXAlignment = Enum.TextXAlignment.Left

    local chanceMinus = Instance.new("TextButton") chanceMinus.Parent = frame
    chanceMinus.Size = UDim2.new(0,28,0,20)
    chanceMinus.Position = UDim2.new(0,180,0,126)
    chanceMinus.Text = "-"
    chanceMinus.Font = Enum.Font.SourceSansBold
    chanceMinus.TextSize = 18
    chanceMinus.BackgroundColor3 = Color3.fromRGB(70,70,70)
    chanceMinus.TextColor3 = Color3.fromRGB(255,255,255)

    local chancePlus = Instance.new("TextButton") chancePlus.Parent = frame
    chancePlus.Size = UDim2.new(0,28,0,20)
    chancePlus.Position = UDim2.new(0,214,0,126)
    chancePlus.Text = "+"
    chancePlus.Font = Enum.Font.SourceSansBold
    chancePlus.TextSize = 18
    chancePlus.BackgroundColor3 = Color3.fromRGB(70,70,70)
    chancePlus.TextColor3 = Color3.fromRGB(255,255,255)

    -- Button callbacks
    fastButton.MouseButton1Click:Connect(function()
        Config.mode = "fast"
        modeDropdown.Text = Config.mode
        Notify("modern_autofish", "Mode set to FAST")
    end)
    secureButton.MouseButton1Click:Connect(function()
        Config.mode = "secure"
        modeDropdown.Text = Config.mode
        Notify("modern_autofish", "Mode set to SECURE")
    end)

    startBtn.MouseButton1Click:Connect(function()
        if Config.enabled then
            Notify("modern_autofish", "Already running")
            return
        end
        Config.enabled = true
        sessionId = sessionId + 1
        task.spawn(function() AutofishRunner(sessionId) end)
    end)

    stopBtn.MouseButton1Click:Connect(function()
        Config.enabled = false
        sessionId = sessionId + 1
    end)

    delayMinus.MouseButton1Click:Connect(function()
        Config.autoRecastDelay = math.max(0.05, Config.autoRecastDelay - 0.1)
        delayLabel.Text = string.format("Recast Delay: %.2fs", Config.autoRecastDelay)
    end)
    delayPlus.MouseButton1Click:Connect(function()
        Config.autoRecastDelay = Config.autoRecastDelay + 0.1
        delayLabel.Text = string.format("Recast Delay: %.2fs", Config.autoRecastDelay)
    end)

    chanceMinus.MouseButton1Click:Connect(function()
        Config.safeModeChance = math.max(0, Config.safeModeChance - 5)
        chanceLabel.Text = string.format("Safe Perfect %%: %d", Config.safeModeChance)
    end)
    chancePlus.MouseButton1Click:Connect(function()
        Config.safeModeChance = math.min(100, Config.safeModeChance + 5)
        chanceLabel.Text = string.format("Safe Perfect %%: %d", Config.safeModeChance)
    end)

    Notify("modern_autofish", "UI ready - Select mode and press Start")
end

-- Build UI and ready
BuildUI()

-- Expose quick API on _G for convenience
_G.ModernAutoFish = {
    Start = function() if not Config.enabled then Config.enabled = true; sessionId = sessionId + 1; task.spawn(function() AutofishRunner(sessionId) end) end end,
    Stop = function() Config.enabled = false; sessionId = sessionId + 1 end,
    SetMode = function(m) if m == "fast" or m == "secure" then Config.mode = m end end,
    Config = Config
}

print("modern_autofish loaded - UI created and API available via _G.ModernAutoFish")
